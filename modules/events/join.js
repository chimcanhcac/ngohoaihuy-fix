  Ôªømodule.exports.config = {
	name: "joinNoti",
	eventType: ["log:subscribe"],
	version: "1.0.3",
	credits: "Mirai Team",
	description: "Th√¥ng b√°o bot ho·∫∑c ng∆∞·ªùi v√†o nh√≥m",
	dependencies: {
		"fs-extra": ""
	}
};

module.exports.run = async function({ api, event, Users }) {
	const { join } = global.nodemodule["path"];
	const { threadID } = event;
	if (event.logMessageData.addedParticipants.some(i => i.userFbId == api.getCurrentUserID())) {
		api.changeNickname(`[ ${global.config.PREFIX} ] ‚Ä¢ ${(!global.config.BOTNAME) ? "Bot Chim <(") : global.config.BOTNAME}`, threadID, api.getCurrentUserID());
		return api.sendMessage(`Bot ƒë√£ ƒë∆∞·ª£c n*ng cac. Connected successfully!\nC·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng con bot n√†y, Chim  ch√∫c m·ªçi ng∆∞·ªùi x√†i xong r·ªìi bu·ªìn UwU <3\nƒêi·ªÅu kho·∫£n s·ª≠ d·ª•ng bot trong box:\n‚ö† Vui l√≤ng ch·∫•p h√†n nghi√™m ch·ªânh ƒë·ªÉ tr√°nh b·ªã h·∫°n ch·∫ø d√πng l·ªánh ( user ban )\n1: Kh√¥ng spam l·ªánh bot, spam prefix qu√° nhi·ªÅu g√¢y die bot,cp....\n2: Kh√¥ng ch·ª≠i bot v√¨ n√≥ ho·∫°t ƒë·ªông 100% l√† m√°y!\n3: Kh√¥ng l·∫°m d·ª•ng l·ªánh c·ªßa bot m√† spam....\n4: Kh√¥ng l·∫°m d·ª•ng c√°c ch·ª≠i nƒÉng c·ªßa bot v√†o vi·ªác x·∫•u\n5: X√†i l·ªánh ngu th√¨ ƒë·ª´ng c√≥ ch·ª≠i, th·ªùi ƒë·∫°i 4.0 r·ªìi vƒÉn minh l√™n...\n6: N·∫øu ph√°t hi·ªán s·∫Ω b·ªã ƒÉn ban (l√† kh√¥ng s·ª≠ d·ª•ng ƒë∆∞·ª£c bot n·ªØa)\n7: Ch·ª≠i bot n√≥ s·∫Ω t·ª± ƒë·ªông out n√™n l√† ƒë·ª´ng th·∫Øc m·∫Øc v√† khi out n√≥ s·∫Ω ƒë·ªÉ l·∫°i tin nh·∫Øn cho c√°c b·∫°n\n8: Xin c·∫£m ∆°n ƒë√£ ƒë·ªçc...UwU\n¬© Admin: Ng√¥ Ho√†i Huy`, threadID);
	}
	else {
		try {
			const { createReadStream, existsSync, mkdirSync } = global.nodemodule["fs-extra"];
			let { threadName, participantIDs } = await api.getThreadInfo(threadID);

			const threadData = global.data.threadData.get(parseInt(threadID)) || {};
			const path = join(__dirname, "cache", "joinGif");
			const pathGif = join(path, `joinGif.gif`);

			var mentions = [], nameArray = [], memLength = [], i = 0;
			
			for (id in event.logMessageData.addedParticipants) {
				const userName = event.logMessageData.addedParticipants[id].fullName;
				nameArray.push(userName);
				mentions.push({ tag: userName, id });
				memLength.push(participantIDs.length - i++);

				if (!global.data.allUserID.includes(id)) {
					await Users.createData(id, { name: userName, data: {} });
					global.data.allUserID.push(id);
					logger(global.getText("handleCreateDatabase", "newUser", id), "[ DATABASE ]");
				}
			}
			memLength.sort((a, b) => a - b);
			
			(typeof threadData.customJoin == "undefined") ? msg = "üëãHi c·∫≠u {name}.\nCh√†o m·ª´ng c·∫≠u ƒë√£ ƒë·∫øn v·ªõi {threadName} .  l√† 1 trong nh·ªØng con v·ª£ iu c·ªßa Chim‚öú.\n{type} vui m·ª´ng khi ƒë∆∞·ª£c g·∫∑p v·ª£ ü§§\nKhi v√¥ c√°c b·∫°n h√£y coi c√°i lu·∫≠t gi√∫p chim nhak:\n/-rule" : msg = threadData.customJoin;
			msg = msg
			.replace(/\{name}/g, nameArray.join(', '))
			.replace(/\{type}/g, (memLength.length > 1) ?  't·ª•i m√†y' : 'm√†y')
			.replace(/\{soThanhVien}/g, memLength.join(', '))
			.replace(/\{threadName}/g, threadName);

			if (existsSync(path)) mkdirSync(path, { recursive: true });

			if (existsSync(pathGif)) formPush = { body: msg, attachment: createReadStream(pathGif), mentions }
			else formPush = { body: msg, mentions }

			return api.sendMessage(formPush, threadID);
		} catch (e) { return console.log(e) };
	}
}